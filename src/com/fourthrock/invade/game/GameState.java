package com.fourthrock.invade.game;

import com.fourthrock.invade.draw.CanvasRenderer;
import com.fourthrock.invade.draw.Screen2D;
import com.fourthrock.invade.game.scene.Scene;
import com.fourthrock.invade.util.Clock;


/**
 * The main class to hold all internal state for the game.
 * @author Joseph
 *
 */
public class GameState {
	
	private Scene scene;
	private Clock clock;

	public GameState(final Scene scene) {
		this.scene = scene;
		this.clock = new Clock();
	}

	/**
	 * Update the GameState.
	 * 
	 * Since there are no plans to make the game work
	 * over a network, the non-determinism introduced
	 * by updating according to a time delta is
	 * acceptable.
	 * 
	 * OpenGL's vsync is already going to make the
	 * game render at an acceptable rate. We use the
	 * time delta to make sure that super fast phones
	 * don't get super fast games.
	 * 
	 * @param dt, the time in milliseconds since the last step started
	 */
	public void step() {
		scene = scene.step(clock.reset());
	}
	
	/**
	 * The user made a pan motion. Take the distances
	 * in screen space dx and dy and determine what to do.
	 * 
	 * @param dx, the x distance traversed
	 * @param dy, the y distance traversed
	 */
	public void handlePan(final float dx, final float dy) {
		scene.handlePan(dx, dy);
	}

	/**
	 * The user made a quick, single tap. Take the tap's
	 * location in screen space and determine what to do.
	 * @param x, the x coordinate
	 * @param y, the y coordinate
	 */
	public void handleTap(final float x, final float y) {
		scene.handleTap(new Screen2D(x, y));
	}

	/**
	 * The user made a scaling gesture (pinching, zooming).
	 * Take the scaling factor and determine what to do.
	 * 
	 * @param scaleFactor, the scaling amount generated by the gesture
	 */
	public void handleScaling(final float scaleFactor) {
		scene.handleScaling(scaleFactor);
	}
	
	/**
	 * Returns the {x,y,z} coordinates of the camera.
	 */
	public float[] getEye() {
		return scene.getEye();
	}
	
	/**
	 * Returns the zoom factor for the camera.
	 */
	public float getZoom() {
		return scene.getZoom();
	}

	/**
	 * Draws out all contents of the current scene.
	 * 
	 * @param renderer
	 */
	public void render(final CanvasRenderer renderer) {
		scene.render(renderer);
	}

	public void onResume() {
		// if it took 30 years to get back to the app,
		// we would hope on the next step() call that
		// the state would only advance a single frame.
		// so let's reset that clock.
		clock.reset();
	}
}
