package com.fourthrock.invade.game.scene;

import com.fourthrock.invade.draw.CanvasRenderer;

/**
 * Represents a logical state or "scene" in the GameState
 * @author Joseph
 *
 */
public interface Scene {

	/**
	 * Update the state by dt (comes in milliseconds).
	 * 
	 * Return the next Scene for the GameState to run.
	 * If supposed to remain in the same Scene, return <code>this</code>.
	 * 
	 * @param dt, the time in milliseconds since the last step started
	 */
	public Scene step(final long dt);

	/**
	 * The user made a pan motion. Take the distances
	 * in screen space dx and dy and determine what to do.
	 * 
	 * @param dx, the x distance traversed
	 * @param dy, the y distance traversed
	 */
	public void handlePan(final float dx, final float dy);

	/**
	 * The user made a quick, single tap. Take the tap's
	 * location in screen space and determine what to do.
	 * @param x, the x coordinate
	 * @param y, the y coordinate
	 */
	public void handleTap(final float x, final float y);

	/**
	 * The user made a scaling gesture (pinching, zooming).
	 * Take the scaling factor and determine what to do.
	 * 
	 * @param scaleFactor, the scaling amount generated by the gesture
	 */
	public void handleScaling(final float scaleFactor);
	
	/**
	 * Return the {x,y,z} coordinates for the current camera
	 */
	public float[] getEye();

	/**
	 * Return the zoom factor for the current camera.
	 */
	public float getZoom();

	/**
	 * With the GameRenderer, draw out all necessary
	 * components.
	 * 
	 * @param renderer, the GameRenderer object with which
	 * 			to do thy bidding.
	 */
	public void render(final CanvasRenderer renderer);

}
